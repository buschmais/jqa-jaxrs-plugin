<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

	<concept id="jaxrs:RequestMethodDesignator">
		<description>Finds request method designator annotations (i.e. @GET, @POST, @PUT, @DELETE, @HEAD, @OPTIONS) and labels them with 'JaxRS' and 'RequestMethodDesignator'
		</description>
		<cypher><![CDATA[
            MATCH (a:TYPE)
            WHERE a.FQN IN ["javax.ws.rs.GET", "javax.ws.rs.POST", "javax.ws.rs.PUT", "javax.ws.rs.DELETE", "javax.ws.rs.HEAD", "javax.ws.rs.OPTIONS"]
            SET a:JaxRS:RequestMethodDesignator
            RETURN a as requestMethodDesignator
        ]]></cypher>
	</concept>

	<concept id="jaxrs:Resource">
		<requiresConcept refId="jaxrs:RequestMethodDesignator" />
		<description>Finds classes or interfaces with atleast one method annotated with "@javax.ws.rs.Path" or with request method designator 
		(i.e. @GET, @POST, @PUT, @DELETE, @HEAD, @OPTIONS) and labels them with 'JaxRS' and 'Resource'.
		</description>
		<cypher><![CDATA[
            MATCH (t:TYPE)-[:DECLARES]->(m:METHOD)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:TYPE)
			WHERE (a:JaxRS:RequestMethodDesignator OR a.FQN="javax.ws.rs.Path")
			AND (t:CLASS OR t:INTERFACE)
            SET t:JaxRS:Resource
            RETURN DISTINCT t as restResource
        ]]></cypher>
	</concept>

	<concept id="jaxrs:SubResourceLocator">
		<requiresConcept refId="jaxrs:RequestMethodDesignator" />
		<description>Finds classes or interfaces with method annotated with "@javax.ws.rs.Path" but no request method designator 
		and labels the methods with 'JaxRS' and 'SubResourceLocator'.
		</description>
		<cypher><![CDATA[
            MATCH (t:TYPE)-[:DECLARES]->(m:METHOD)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:TYPE)
			WHERE a.FQN="javax.ws.rs.Path"
			AND NOT a:JaxRS:RequestMethodDesignator
			AND (t:CLASS OR t:INTERFACE)
            SET m:JaxRS:SubResourceLocator
            RETURN DISTINCT m as restSubResourceLocator
        ]]></cypher>
	</concept>

	<concept id="jaxrs:ResourceMethod">
		<requiresConcept refId="jaxrs:Resource" />
		<description>Finds methods that belong to resource class or interface and annotated with request method designator 
		(i.e. @GET, @POST, @PUT, @DELETE, @HEAD, @OPTIONS) and labels them with 'JaxRS' and 'ResourceMethod'.
		</description>
		<cypher><![CDATA[
            MATCH (c:JaxRS:Resource)-[:DECLARES]->(m:METHOD)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            SET m:JaxRS:ResourceMethod
            RETURN m as resourceMethod
        ]]></cypher>
	</concept>

	<concept id="jaxrs:GetResourceMethod">
		<requiresConcept refId="jaxrs:ResourceMethod" />
		<description>Finds resource methods annotated with "@javax.ws.rs.GET" and labels them with 'GetResourceMethod'. </description>
		<cypher><![CDATA[
            MATCH (m:JaxRS:ResourceMethod)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            WHERE a.FQN = "javax.ws.rs.GET"
            SET m:GetResourceMethod
            RETURN m as getMethod
        ]]></cypher>
	</concept>

	<concept id="jaxrs:PutResourceMethod">
		<requiresConcept refId="jaxrs:ResourceMethod" />
		<description>Finds resource methods annotated with "@javax.ws.rs.PUT" and labels them with 'PutResourceMethod'. </description>
		<cypher><![CDATA[
            MATCH (m:JaxRS:ResourceMethod)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            WHERE a.FQN = "javax.ws.rs.PUT"
            SET m:PutResourceMethod
            RETURN m as putMethod
        ]]></cypher>
	</concept>

	<concept id="jaxrs:PostResourceMethod">
		<requiresConcept refId="jaxrs:ResourceMethod" />
		<description>Finds resource methods annotated with "@javax.ws.rs.POST" and labels them with 'PostResourceMethod'. </description>
		<cypher><![CDATA[
            MATCH (m:JaxRS:ResourceMethod)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            WHERE a.FQN = "javax.ws.rs.POST"
            SET m:PostResourceMethod
            RETURN m as postMethod
        ]]></cypher>
	</concept>

	<concept id="jaxrs:DeleteResourceMethod">
		<requiresConcept refId="jaxrs:ResourceMethod" />
		<description>Finds resource methods annotated with "@javax.ws.rs.DELETE" and labels them with 'DeleteResourceMethod'. </description>
		<cypher><![CDATA[
            MATCH (m:JaxRS:ResourceMethod)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            WHERE a.FQN = "javax.ws.rs.DELETE"
            SET m:DeleteResourceMethod
            RETURN m as deleteMethod
        ]]></cypher>
	</concept>

	<concept id="jaxrs:HeadResourceMethod">
		<requiresConcept refId="jaxrs:ResourceMethod" />
		<description>Finds resource methods annotated with "@javax.ws.rs.HEAD" and labels them with 'HeadResourceMethod'. </description>
		<cypher><![CDATA[
            MATCH (m:JaxRS:ResourceMethod)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            WHERE a.FQN = "javax.ws.rs.HEAD"
            SET m:HeadResourceMethod
            RETURN m as headMethod
        ]]></cypher>
	</concept>

	<concept id="jaxrs:OptionsResourceMethod">
		<requiresConcept refId="jaxrs:ResourceMethod" />
		<description>Finds resource methods annotated with "@javax.ws.rs.OPTIONS" and labels them with 'OptionsResourceMethod'. </description>
		<cypher><![CDATA[
            MATCH (m:JaxRS:ResourceMethod)-[:ANNOTATED_BY]-()-[:OF_TYPE]->(a:JaxRS:RequestMethodDesignator)
            WHERE a.FQN = "javax.ws.rs.OPTIONS"
            SET m:OptionsResourceMethod
            RETURN m as optionsMethod
        ]]></cypher>
	</concept>
	
</jqa:jqassistant-rules>